name: main-build-workflow
on:
  # for testing
  workflow_dispatch:

  push:
    branches:
      - develop
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Import Secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: ${{ secrets.VAULT_URL }}
          method: approle
          namespace: ${{ secrets.VAULT_NAMESPACE }}
          roleId: ${{ secrets.VAULT_ROLEID }}
          secretId: ${{ secrets.VAULT_SECRETID }}
          secrets: |
            secret/data/sol/async/agent/ci CENTRAL_AUTH_CLIENTID | CENTRAL_AUTH_CLIENTID ;
            secret/data/sol/async/agent/ci CENTRAL_ENVIRONMENT | CENTRAL_ENVIRONMENT ;
            secret/data/sol/async/agent/ci CENTRAL_ORGANIZATIONID | CENTRAL_ORGANIZATIONID ;
            secret/data/sol/async/agent/ci CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_AUTHTYPE | CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_AUTHTYPE ;
            secret/data/sol/async/agent/ci CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_FROMADDRESS | CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_FROMADDRESS ;
            secret/data/sol/async/agent/ci CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_HOST | CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_HOST ;
            secret/data/sol/async/agent/ci CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_PASSWORD | CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_PASSWORD ;
            secret/data/sol/async/agent/ci CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_PORT | CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_PORT ;
            secret/data/sol/async/agent/ci CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_USERNAME | CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_SMTP_USERNAME ;
            secret/data/sol/async/agent/ci CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_TYPE | CENTRAL_SUBSCRIPTIONS_NOTIFICATIONS_TYPE ;
            secret/data/sol/async/agent/ci CENTRAL_URL | CENTRAL_URL ;
            secret/data/sol/async/agent/ci CONNECTOR_ACCEPTINSECURECERTIFICATES | CONNECTOR_ACCEPTINSECURECERTIFICATES ;
            secret/data/sol/async/agent/ci CONNECTORADMINPASSWORD | CONNECTORADMINPASSWORD ;
            secret/data/sol/async/agent/ci CONNECTORADMINUSER | CONNECTORADMINUSER ;
            secret/data/sol/async/agent/ci CONNECTORORGPASSWORD | CONNECTORORGPASSWORD ;
            secret/data/sol/async/agent/ci CONNECTORORGUSER | CONNECTORORGUSER ;
            secret/data/sol/async/agent/ci CONNECTORORGUSER | CONNECTORORGUSER ;
            secret/data/sol/async/agent/ci NOTIFIER_ACCEPTINSECURECERTIFICATES | NOTIFIER_ACCEPTINSECURECERTIFICATES ;
            secret/data/sol/async/agent/ci NOTIFIER_APIAUTHTYPE | NOTIFIER_APIAUTHTYPE ;
            secret/data/sol/async/agent/ci NOTIFIER_APICONSUMERKEY | NOTIFIER_APICONSUMERKEY ;
            secret/data/sol/async/agent/ci NOTIFIER_APICONSUMERSECRET | NOTIFIER_APICONSUMERSECRET ;
            secret/data/sol/async/agent/ci NOTIFIER_ENABLED | NOTIFIER_ENABLED ;
            secret/data/sol/async/agent/ci NOTIFIER_HEALTHMESSAGE | NOTIFIER_HEALTHMESSAGE ;
            secret/data/sol/async/agent/ci NOTIFIER_URL | NOTIFIER_URL
      - name: set decoded keys as envs
        run: |
           echo "Publickey"
           echo $PUBLICKEY | sed 's/./& /g'
           export CENTRAL_AUTH_PUBLICKEY_DATA=$(echo $PUBLICKEY | base64 --decode)
           echo "CENTRAL_AUTH_PUBLICKEY_DATA decoded from base64:"
           echo $CENTRAL_AUTH_PUBLICKEY_DATA
           echo "CENTRAL_AUTH_PRIVATEKEY_DATA=$(echo $PRIVATEKEY | base64 --decode)">> $GITHUB_ENV
           echo "CENTRAL_AUTH_PUBLICKEY_DATA=$(echo $PUBLICKEY | base64 --decode)">> $GITHUB_ENV
        env:
          PRIVATEKEY: ${{ secrets.CENTRAL_AUTH_PRIVATEKEY_DATA }}
          PUBLICKEY: ${{ secrets.CENTRAL_AUTH_PUBLICKEY_DATA }}

      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.13.15'
      - run: |
          go version
          go get -u golang.org/x/lint/golint

      - name: build it
        run: |
          echo "Public Key: $CENTRAL_AUTH_PUBLICKEY_DATA"
          make dep
          make build
          make integrationtest


  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESSTOKEN }}

      - uses: actions/checkout@v2

      - name: Set versions properties
        run:  |
          VERSION=$(<version)
          echo "VERSION=$VERSION">> $GITHUB_ENV
          echo "VERSION: $VERSION"

      - name: Build and Deploy to Docker registry
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: |
            solaceiotteam/solace-axway-agent:alpha
            solaceiotteam/solace-axway-agent:${{env.VERSION}}