// Package Notification provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package notification

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Defines values for NotificationSubscribeEventDatacontenttype.
const (
	NotificationSubscribeEventDatacontenttypeApplicationjson NotificationSubscribeEventDatacontenttype = "application/json"
)

// Defines values for NotificationSubscribeEventType.
const (
	NotificationSubscribeEventTypeComSolaceIotTeamAsyncapiNotificationSubscribeV1 NotificationSubscribeEventType = "com.solace.iot-team.asyncapi.notification.subscribe.v1"
)

// Defines values for NotificationUnsubscribeEventDatacontenttype.
const (
	NotificationUnsubscribeEventDatacontenttypeApplicationjson NotificationUnsubscribeEventDatacontenttype = "application/json"
)

// Defines values for NotificationUnsubscribeEventType.
const (
	NotificationUnsubscribeEventTypeComSolaceIotTeamAsyncapiNotificationUnsubscribeV1 NotificationUnsubscribeEventType = "com.solace.iot-team.asyncapi.notification.unsubscribe.v1"
)

// HealthEvent defines model for HealthEvent.
type HealthEvent struct {
	Echo string `json:"echo"`
}

// NotificationSubscribeEvent defines model for NotificationSubscribeEvent.
type NotificationSubscribeEvent struct {
	Data            SubscribeData                             `json:"data"`
	Datacontenttype NotificationSubscribeEventDatacontenttype `json:"datacontenttype"`
	Id              string                                    `json:"id"`
	Source          string                                    `json:"source"`
	Specversion     string                                    `json:"specversion"`
	Time            string                                    `json:"time"`
	Type            NotificationSubscribeEventType            `json:"type"`
}

// NotificationSubscribeEventDatacontenttype defines model for NotificationSubscribeEvent.Datacontenttype.
type NotificationSubscribeEventDatacontenttype string

// NotificationSubscribeEventType defines model for NotificationSubscribeEvent.Type.
type NotificationSubscribeEventType string

// NotificationUnsubscribeEvent defines model for NotificationUnsubscribeEvent.
type NotificationUnsubscribeEvent struct {
	Data            UnsubscribeData                             `json:"data"`
	Datacontenttype NotificationUnsubscribeEventDatacontenttype `json:"datacontenttype"`
	Id              string                                      `json:"id"`
	Source          string                                      `json:"source"`
	Specversion     string                                      `json:"specversion"`
	Time            string                                      `json:"time"`
	Type            NotificationUnsubscribeEventType            `json:"type"`
}

// NotificationUnsubscribeEventDatacontenttype defines model for NotificationUnsubscribeEvent.Datacontenttype.
type NotificationUnsubscribeEventDatacontenttype string

// NotificationUnsubscribeEventType defines model for NotificationUnsubscribeEvent.Type.
type NotificationUnsubscribeEventType string

// SubscribeData defines model for SubscribeData.
type SubscribeData struct {
	Api             string                    `json:"api"`
	Application     string                    `json:"application"`
	ApplicationData map[string]interface{}    `json:"applicationData"`
	AsyncApis       []*map[string]interface{} `json:"asyncApis"`
	Environment     string                    `json:"environment"`
	Product         string                    `json:"product"`
	Subscriber      string                    `json:"subscriber"`
	SubscriberEmail string                    `json:"subscriberEmail"`
	Subscription    string                    `json:"subscription"`
	Team            string                    `json:"team"`
}

// UnsubscribeData defines model for UnsubscribeData.
type UnsubscribeData struct {
	Api             string `json:"api"`
	Application     string `json:"application"`
	Environment     string `json:"environment"`
	Product         string `json:"product"`
	Subscriber      string `json:"subscriber"`
	SubscriberEmail string `json:"subscriberEmail"`
	Subscription    string `json:"subscription"`
	Team            string `json:"team"`
}

// PostNotifierHealthJSONBody defines parameters for PostNotifierHealth.
type PostNotifierHealthJSONBody HealthEvent

// PostNotifierSubscribeJSONBody defines parameters for PostNotifierSubscribe.
type PostNotifierSubscribeJSONBody NotificationSubscribeEvent

// PostNotifierUnsubscribeJSONBody defines parameters for PostNotifierUnsubscribe.
type PostNotifierUnsubscribeJSONBody NotificationUnsubscribeEvent

// PostNotifierHealthJSONRequestBody defines body for PostNotifierHealth for application/json ContentType.
type PostNotifierHealthJSONRequestBody PostNotifierHealthJSONBody

// PostNotifierSubscribeJSONRequestBody defines body for PostNotifierSubscribe for application/json ContentType.
type PostNotifierSubscribeJSONRequestBody PostNotifierSubscribeJSONBody

// PostNotifierUnsubscribeJSONRequestBody defines body for PostNotifierUnsubscribe for application/json ContentType.
type PostNotifierUnsubscribeJSONRequestBody PostNotifierUnsubscribeJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostNotifierHealth request with any body
	PostNotifierHealthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNotifierHealth(ctx context.Context, body PostNotifierHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNotifierSubscribe request with any body
	PostNotifierSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNotifierSubscribe(ctx context.Context, body PostNotifierSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNotifierUnsubscribe request with any body
	PostNotifierUnsubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNotifierUnsubscribe(ctx context.Context, body PostNotifierUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostNotifierHealthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotifierHealthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotifierHealth(ctx context.Context, body PostNotifierHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotifierHealthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotifierSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotifierSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotifierSubscribe(ctx context.Context, body PostNotifierSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotifierSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotifierUnsubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotifierUnsubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotifierUnsubscribe(ctx context.Context, body PostNotifierUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotifierUnsubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostNotifierHealthRequest calls the generic PostNotifierHealth builder with application/json body
func NewPostNotifierHealthRequest(server string, body PostNotifierHealthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNotifierHealthRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNotifierHealthRequestWithBody generates requests for PostNotifierHealth with any type of body
func NewPostNotifierHealthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifier/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNotifierSubscribeRequest calls the generic PostNotifierSubscribe builder with application/json body
func NewPostNotifierSubscribeRequest(server string, body PostNotifierSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNotifierSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNotifierSubscribeRequestWithBody generates requests for PostNotifierSubscribe with any type of body
func NewPostNotifierSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifier/subscribe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNotifierUnsubscribeRequest calls the generic PostNotifierUnsubscribe builder with application/json body
func NewPostNotifierUnsubscribeRequest(server string, body PostNotifierUnsubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNotifierUnsubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNotifierUnsubscribeRequestWithBody generates requests for PostNotifierUnsubscribe with any type of body
func NewPostNotifierUnsubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifier/unsubscribe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostNotifierHealth request with any body
	PostNotifierHealthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotifierHealthResponse, error)

	PostNotifierHealthWithResponse(ctx context.Context, body PostNotifierHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotifierHealthResponse, error)

	// PostNotifierSubscribe request with any body
	PostNotifierSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotifierSubscribeResponse, error)

	PostNotifierSubscribeWithResponse(ctx context.Context, body PostNotifierSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotifierSubscribeResponse, error)

	// PostNotifierUnsubscribe request with any body
	PostNotifierUnsubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotifierUnsubscribeResponse, error)

	PostNotifierUnsubscribeWithResponse(ctx context.Context, body PostNotifierUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotifierUnsubscribeResponse, error)
}

type PostNotifierHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostNotifierHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNotifierHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNotifierSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostNotifierSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNotifierSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNotifierUnsubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostNotifierUnsubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNotifierUnsubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostNotifierHealthWithBodyWithResponse request with arbitrary body returning *PostNotifierHealthResponse
func (c *ClientWithResponses) PostNotifierHealthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotifierHealthResponse, error) {
	rsp, err := c.PostNotifierHealthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotifierHealthResponse(rsp)
}

func (c *ClientWithResponses) PostNotifierHealthWithResponse(ctx context.Context, body PostNotifierHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotifierHealthResponse, error) {
	rsp, err := c.PostNotifierHealth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotifierHealthResponse(rsp)
}

// PostNotifierSubscribeWithBodyWithResponse request with arbitrary body returning *PostNotifierSubscribeResponse
func (c *ClientWithResponses) PostNotifierSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotifierSubscribeResponse, error) {
	rsp, err := c.PostNotifierSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotifierSubscribeResponse(rsp)
}

func (c *ClientWithResponses) PostNotifierSubscribeWithResponse(ctx context.Context, body PostNotifierSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotifierSubscribeResponse, error) {
	rsp, err := c.PostNotifierSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotifierSubscribeResponse(rsp)
}

// PostNotifierUnsubscribeWithBodyWithResponse request with arbitrary body returning *PostNotifierUnsubscribeResponse
func (c *ClientWithResponses) PostNotifierUnsubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotifierUnsubscribeResponse, error) {
	rsp, err := c.PostNotifierUnsubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotifierUnsubscribeResponse(rsp)
}

func (c *ClientWithResponses) PostNotifierUnsubscribeWithResponse(ctx context.Context, body PostNotifierUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotifierUnsubscribeResponse, error) {
	rsp, err := c.PostNotifierUnsubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotifierUnsubscribeResponse(rsp)
}

// ParsePostNotifierHealthResponse parses an HTTP response from a PostNotifierHealthWithResponse call
func ParsePostNotifierHealthResponse(rsp *http.Response) (*PostNotifierHealthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostNotifierHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostNotifierSubscribeResponse parses an HTTP response from a PostNotifierSubscribeWithResponse call
func ParsePostNotifierSubscribeResponse(rsp *http.Response) (*PostNotifierSubscribeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostNotifierSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostNotifierUnsubscribeResponse parses an HTTP response from a PostNotifierUnsubscribeWithResponse call
func ParsePostNotifierUnsubscribeResponse(rsp *http.Response) (*PostNotifierUnsubscribeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostNotifierUnsubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
